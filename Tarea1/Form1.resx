<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="picImagen.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        v/0H6PDedmXGbAMAAAAASUVORK5CYII=
</value>
  </data>
</root>